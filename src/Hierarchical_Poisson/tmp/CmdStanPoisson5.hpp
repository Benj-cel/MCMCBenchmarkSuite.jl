// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace CmdStanPoisson5_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/home/dfish/.julia/dev/MCMCBenchmarks/Examples/Hierarchical_Poisson/tmp/CmdStanPoisson5.stan");
    reader.add_event(24, 22, "end", "/home/dfish/.julia/dev/MCMCBenchmarks/Examples/Hierarchical_Poisson/tmp/CmdStanPoisson5.stan");
    return reader;
}

class CmdStanPoisson5_model : public prob_grad {
private:
        int N;
        std::vector<int> y;
        int Ns;
        std::vector<int> idx;
        std::vector<double> x;
public:
    CmdStanPoisson5_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    CmdStanPoisson5_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "CmdStanPoisson5_model_namespace::CmdStanPoisson5_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 3;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Ns", "int", context__.to_vec());
            Ns = int(0);
            vals_i__ = context__.vals_i("Ns");
            pos__ = 0;
            Ns = vals_i__[pos__++];

            current_statement_begin__ = 5;
            validate_non_negative_index("idx", "N", N);
            context__.validate_dims("data initialization", "idx", "int", context__.to_vec(N));
            idx = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("idx");
            pos__ = 0;
            size_t idx_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < idx_k_0_max__; ++k_0__) {
                idx[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 6;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(N));
            x = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                x[k_0__] = vals_r__[pos__++];
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 9;
            num_params_r__ += 1;
            current_statement_begin__ = 10;
            validate_non_negative_index("a0s", "Ns", Ns);
            num_params_r__ += Ns;
            current_statement_begin__ = 11;
            num_params_r__ += 1;
            current_statement_begin__ = 12;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~CmdStanPoisson5_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 9;
        if (!(context__.contains_r("a0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a0", "double", context__.to_vec());
        double a0(0);
        a0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 10;
        if (!(context__.contains_r("a0s")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a0s missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a0s");
        pos__ = 0U;
        validate_non_negative_index("a0s", "Ns", Ns);
        context__.validate_dims("parameter initialization", "a0s", "vector_d", context__.to_vec(Ns));
        Eigen::Matrix<double, Eigen::Dynamic, 1> a0s(Ns);
        size_t a0s_j_1_max__ = Ns;
        for (size_t j_1__ = 0; j_1__ < a0s_j_1_max__; ++j_1__) {
            a0s(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(a0s);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a0s: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 11;
        if (!(context__.contains_r("a1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a1", "double", context__.to_vec());
        double a1(0);
        a1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 12;
        if (!(context__.contains_r("a0_sig")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a0_sig missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a0_sig");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a0_sig", "double", context__.to_vec());
        double a0_sig(0);
        a0_sig = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, a0_sig);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a0_sig: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 9;
            local_scalar_t__ a0;
            (void) a0;  // dummy to suppress unused var warning
            if (jacobian__)
                a0 = in__.scalar_constrain(lp__);
            else
                a0 = in__.scalar_constrain();

            current_statement_begin__ = 10;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a0s;
            (void) a0s;  // dummy to suppress unused var warning
            if (jacobian__)
                a0s = in__.vector_constrain(Ns, lp__);
            else
                a0s = in__.vector_constrain(Ns);

            current_statement_begin__ = 11;
            local_scalar_t__ a1;
            (void) a1;  // dummy to suppress unused var warning
            if (jacobian__)
                a1 = in__.scalar_constrain(lp__);
            else
                a1 = in__.scalar_constrain();

            current_statement_begin__ = 12;
            local_scalar_t__ a0_sig;
            (void) a0_sig;  // dummy to suppress unused var warning
            if (jacobian__)
                a0_sig = in__.scalar_lb_constrain(0, lp__);
            else
                a0_sig = in__.scalar_lb_constrain(0);

            // model body
            {
            current_statement_begin__ = 15;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);


            current_statement_begin__ = 16;
            lp_accum__.add(normal_log<propto__>(a0, 0, 10));
            current_statement_begin__ = 17;
            lp_accum__.add(normal_log<propto__>(a1, 0, 1));
            current_statement_begin__ = 18;
            lp_accum__.add(cauchy_log<propto__>(a0_sig, 0, 1));
            current_statement_begin__ = 19;
            lp_accum__.add(normal_log<propto__>(a0s, 0, a0_sig));
            current_statement_begin__ = 20;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 20;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(((a0 + get_base1(a0s, get_base1(idx, i, "idx", 1), "a0s", 1)) + (a1 * get_base1(x, i, "x", 1)))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 21;
            lp_accum__.add(poisson_log<propto__>(y, mu));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a0");
        names__.push_back("a0s");
        names__.push_back("a1");
        names__.push_back("a0_sig");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "CmdStanPoisson5_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double a0 = in__.scalar_constrain();
        vars__.push_back(a0);

        Eigen::Matrix<double, Eigen::Dynamic, 1> a0s = in__.vector_constrain(Ns);
        size_t a0s_j_1_max__ = Ns;
        for (size_t j_1__ = 0; j_1__ < a0s_j_1_max__; ++j_1__) {
            vars__.push_back(a0s(j_1__));
        }

        double a1 = in__.scalar_constrain();
        vars__.push_back(a1);

        double a0_sig = in__.scalar_lb_constrain(0);
        vars__.push_back(a0_sig);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "CmdStanPoisson5_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a0";
        param_names__.push_back(param_name_stream__.str());
        size_t a0s_j_1_max__ = Ns;
        for (size_t j_1__ = 0; j_1__ < a0s_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a0s" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a0_sig";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a0";
        param_names__.push_back(param_name_stream__.str());
        size_t a0s_j_1_max__ = Ns;
        for (size_t j_1__ = 0; j_1__ < a0s_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a0s" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a0_sig";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef CmdStanPoisson5_model_namespace::CmdStanPoisson5_model stan_model;

